#2020-02-04
用户注册基于分布式和高并发的设计思路：
1.用户注册时首先尝试在redis中对用户名加锁，若用户名已占用则返回重名，即加锁后其他同名注册请求一律返回重名。
2.加锁后查询mysql用户信息是否重名，若不重名则将注册信息存储在redis缓存中，无论mysql是否重名，用户名锁都等
  待自动失效以提高重名查询性能。
3.用户名锁时长略大于用户信息缓存时长以确保服务器确实处理激活业务或用户信息确实失效。
4.若用户未能及时激活则等待redis缓存信息以及锁自动过期。

#2020-03-08
基于以下三点将图形验证码的生成转移至web模块
1.图形验证码产生图片属于网页渲染的一部份
2.通过Dubbo传输图片比较繁琐
3.Dubbo传输图片信息违背Dubbo开发的小数据量高并发的原则

#2020-03-09
消息队列消费者使用的@JmsListener注解在ContextListener中初始化，而spring中bean的注解（@Component，@Service等）
在dispatcher.xml中初始化，优先级低于前者，故消息队列消费者使用@Autowired注入时找不到对应的bean，如果必须使用注入，
解决方案：https://blog.csdn.net/gaoshili001/article/details/77776863

#2020-03-10
初步规划模块接口

#2020-03-11
用户自定义配置实现初步方案：
1.使用redis存储运行时用户配置信息，各模块接入redis
2.properties文件形式持久化存储用户配置，由admin模块启动时载入redis
相关调整：验证码存储和校验由user调整至web

#2020-03-12
继续整理分布式个性化设置相关内容
1.为了保证配置更新后及时生效，配置信息通过主动访问Redis获取，为了避免验证码等功能频繁访问Redis，在本地维护一个缓存，定期
查询Redis更新配置信息
2.尝试使用Kotlin简化代码（java的优雅是有极限的，所以，我不用Java啦[doge]）

#2020-03-13
1.通过运用Enum.valueOf()简化了个性化键的转换（有放弃了kotlin[doge]）
2.重构了验证码生成部分，还需要做进一步调整

#2020-03-14
实现个性化配置的本地缓存
调整部分接口

#2020-03-15
1.修改完成user部分，重新使用kotlin简化Bean转换，简化游客信息加锁代码
2.Bean转换使用Kotlin，无法识别lombok注解，考虑放弃lombok，所有Bean使用Kotlin实现

#2020-03-16
1.调整各种bug，优化代码
2.网页引入EasyUI重构

#2020-03-17
用EasyUI重构登录和注册页面
经历一周的调整重构，项目目前能够启动运行